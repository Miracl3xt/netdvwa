name: Bandit Python Code Scan

on:
  pull_request:
    branches:
      - main

jobs:
  bandit-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install Bandit
      run: pip install bandit

    - name: List changed files
      id: list_files
      run: |
        git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} > changed_files.txt

    - name: Run Bandit on changed files
      id: bandit_scan
      run: |
        xargs -a changed_files.txt -I {} bandit -r {} -f json -o {}.bandit_output || true

    - name: Analyze Bandit Results
      id: analyze_results
      run: |
        CRITICAL_ISSUES=$(find . -name "*.bandit_output" -exec jq '[.results[] | select(.issue_severity=="CRITICAL") ] | length' {} + | awk '{ total += $1 } END { print total }')
        HIGH_ISSUES=$(find . -name "*.bandit_output" -exec jq '[.results[] | select(.issue_severity=="HIGH") ] | length' {} + | awk '{ total += $1 } END { print total }')

        echo "Critical Issues: $CRITICAL_ISSUES"
        echo "High Issues: $HIGH_ISSUES"
        
        if [ "$CRITICAL_ISSUES" -gt 0 ] || [ "$HIGH_ISSUES" -gt 0 ]; then
          echo "status=block" >> $GITHUB_ENV
        else
          echo "status=success" >> $GITHUB_ENV
        fi

    - name: Add Comment and Block PR
      if: env.status == 'block'
      run: |
        gh pr comment ${{ github.event.pull_request.number }} --body 'Block'
        gh pr close ${{ github.event.pull_request.number }}
      env:
        GH_TOKEN: ${{ secrets.netsk }}

    - name: Add Comment and Merge PR
      if: env.status == 'success'
      run: |
        gh pr comment ${{ github.event.pull_request.number }} --body 'Successful'
        gh pr merge ${{ github.event.pull_request.number }} --merge
      env:
        GH_TOKEN: ${{ secrets.netsk }}
